{"version":3,"sources":["Component/Basics/TodoReacts/Todo.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","useState","inputData","setinputData","list","localStorage","getItem","JSON","parse","getLocalData","item","setitem","isEditItem","setisEditItem","toggleButton","settoggleButton","useEffect","setItem","stringify","addItem","map","currentElement","id","name","myNewInputData","Date","getTime","toString","alert","className","src","alt","type","placeholder","value","onChange","event","target","onClick","index","edited","find","editItem","updateItem","filter","deleteItem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAYe,SAASA,IAEpB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwBF,mBAZP,WACjB,IAAMG,EAAOC,aAAaC,QAAQ,cAClC,OAAIF,EACOG,KAAKC,MAAMJ,GAEX,CAAC,IAOqBK,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAoCV,mBAAS,IAA7C,mBAAOW,EAAP,KAAmBC,EAAnB,KACA,EAAwCZ,oBAAS,GAAjD,mBAAOa,EAAP,KAAqBC,EAArB,KACAC,qBAAU,WACNX,aAAaY,QAAQ,aAAcV,KAAKW,UAAUR,MACnD,CAACA,IAEJ,IAAMS,EAAU,WACZ,GAAKjB,EAEC,GAAGA,GAAaY,EAClBH,EACID,EAAKU,KAAI,SAACC,GACN,OAAGA,EAAeC,KAAKV,EACZ,2BAAIS,GAAX,IAA2BE,KAAKrB,IAG7BmB,MAGflB,EAAa,IACjBU,EAAc,IACdE,EAAgB,QAEV,CACF,IAAMS,EAAiB,CACnBF,IAAI,IAAIG,MAAOC,UAAUC,WACzBJ,KAAMrB,GAGVS,EAAQ,GAAD,mBAAKD,GAAL,CAAWc,KAClBrB,EAAa,SAtBbyB,MAAM,gCA+Cd,OAEI,8BAEI,qBAAKC,UAAU,WAAf,SACI,sBAAKA,UAAU,YAAf,UACI,mCACI,qBAAKC,IAAI,wBAAwBC,IAAI,aACrC,sEAGJ,sBAAKF,UAAU,WAAf,UACI,uBAAOG,KAAK,OAAOC,YAAY,wBAAcJ,UAAU,eAAeK,MAAOhC,EAAWiC,SAAU,SAACC,GAAD,OAAWjC,EAAaiC,EAAMC,OAAOH,UAEtIpB,EAAe,mBAAGe,UAAU,sBAAsBS,QAASnB,IAAgB,mBAAGU,UAAU,qBAAqBS,QAASnB,OAO3H,qBAAKU,UAAU,YAAf,SAEQnB,EAAKU,KAAI,SAACC,GACN,OACI,sBAAKQ,UAAU,WAAf,UACI,+BAAKR,EAAeE,KAApB,OACA,sBAAKM,UAAU,WAAf,UACI,mBAAGA,UAAU,sBAAsBS,QAAS,kBAjDnE,SAACC,GACd,IAAMC,EAAS9B,EAAK+B,MAAK,SAACpB,GACtB,OAAOA,EAAeC,KAAOiB,KAEjCpC,EAAaqC,EAAOjB,MACpBV,EAAc0B,GACdxB,GAAgB,GA2CsE2B,CAASrB,EAAeC,OAC1E,mBAAGO,UAAU,2BAA2BS,QAAS,kBAzCtE,SAAChB,GAChB,IAAMqB,EAAajC,EAAKkC,QAAO,SAACvB,GAC5B,OAAOA,EAAeC,KAAOA,KAEjCX,EAAQgC,GAqCmFE,CAAWxB,EAAeC,YAJ1DD,EAAeC,SAkB9D,qBAAKO,UAAU,YAAf,SACI,wBAAQA,UAAU,eAAe,oBAAkB,aAAaS,QAhDlE,WACd3B,EAAQ,KA+CQ,SACI,yDChHb,SAASmC,IACtB,OACE,8BACC,cAAC9C,EAAD,MCPL,IAYe+C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACZ,EAAD,MAEFa,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9c9fe88d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport \"./Style.css\"\r\n\r\nconst getLocalData = () => {\r\n    const list = localStorage.getItem(\"mytodoList\")\r\n    if (list) {\r\n        return JSON.parse(list)\r\n    } else {\r\n        return [\"\"]\r\n    }\r\n}\r\n\r\nexport default function Todo() {\r\n\r\n    const [inputData, setinputData] = useState(\"\")\r\n    const [item, setitem] = useState(getLocalData())\r\n    const [isEditItem, setisEditItem] = useState(\"\")\r\n    const [toggleButton, settoggleButton] = useState(false)\r\n    useEffect(() => {\r\n        localStorage.setItem(\"mytodoList\", JSON.stringify(item))\r\n    }, [item])\r\n\r\n    const addItem = () => {\r\n        if (!inputData) {\r\n            alert(\"⚠ Please fill the data\")\r\n        }else if(inputData && toggleButton){\r\n            setitem(\r\n                item.map((currentElement)=>{\r\n                    if(currentElement.id===isEditItem){\r\n                        return {...currentElement, name:inputData}\r\n                       \r\n                    }\r\n                    return currentElement;\r\n                }) \r\n            )\r\n            setinputData(\"\")\r\n        setisEditItem(\"\")\r\n        settoggleButton(\"\");\r\n        }       \r\n         else {\r\n            const myNewInputData = {\r\n                id: new Date().getTime().toString(),\r\n                name: inputData,\r\n            }\r\n\r\n            setitem([...item, myNewInputData])\r\n            setinputData(\"\")\r\n        }\r\n    }\r\n\r\n    const editItem = (index) => {\r\n        const edited = item.find((currentElement) => {\r\n            return currentElement.id === index;\r\n        })\r\n        setinputData(edited.name)\r\n        setisEditItem(index)\r\n        settoggleButton(true);\r\n    }\r\n\r\n    const deleteItem = (id) => {\r\n        const updateItem = item.filter((currentElement) => {\r\n            return currentElement.id !== id;\r\n        })\r\n        setitem(updateItem);\r\n\r\n    }\r\n\r\n    const removeAll = () => {\r\n        setitem([])\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n\r\n            <div className=\"main-div\">\r\n                <div className=\"child-div\">\r\n                    <figure>\r\n                        <img src=\"./images/download.jpg\" alt=\"todoLogo\" />\r\n                        <figcaption>Add your list here ✌</figcaption>\r\n                    </figure>\r\n\r\n                    <div className=\"addItems\">\r\n                        <input type=\"text\" placeholder=\"📝 Add Item\" className=\"form-control\" value={inputData} onChange={(event) => setinputData(event.target.value)} />\r\n\r\n                       { toggleButton ? <i className=\"fa fa-check add-btn\" onClick={addItem}></i> : <i className=\"fa fa-plus add-btn\" onClick={addItem}></i>}\r\n                     \r\n                    </div>\r\n\r\n\r\n\r\n\r\n                    <div className=\"showItems\">\r\n                        {\r\n                            item.map((currentElement) => {\r\n                                return (\r\n                                    <div className=\"eachItem\" key={currentElement.id} >\r\n                                        <h3>{currentElement.name} </h3>\r\n                                        <div className=\"todo-btn\">\r\n                                            <i className=\"far fa-edit add-btn\" onClick={() => editItem(currentElement.id)}></i>\r\n                                            <i className=\"far fa-trash-alt add-btn\" onClick={() => deleteItem(currentElement.id)}></i>\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n\r\n\r\n\r\n\r\n\r\n                    </div>\r\n\r\n\r\n                    <div className=\"showItems\">\r\n                        <button className=\"btn effect04\" data-sm-link-text=\"Remove All\" onClick={removeAll} >\r\n                            <span>Clear List</span>\r\n                        </button>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\nimport Todo from './Component/Basics/TodoReacts/Todo'\n\n\nexport default function App() {\n  return (\n    <div>\n     <Todo/>\n    </div>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}